// QueueItemState flows: see README.md

export const QUEUE_ITEM_STATE = {
  VALIDATOR: {
    PENDING_QUEUING: 'PENDING_QUEUING',
    PENDING_VALIDATION: 'PENDING_VALIDATION',
    QUEUING_IN_PROGRESS: 'QUEUING_IN_PROGRESS',
    UPLOADING: 'UPLOADING',
    VALIDATING: 'VALIDATING',
    WAITING_FOR_RECORDS: 'WAITING_FOR_RECORDS'
  },
  IMPORTER: {
    IMPORTING: 'IMPORTING',
    IN_PROCESS: 'IN_PROCESS',
    IN_QUEUE: 'IN_QUEUE'
  },
  DONE: 'DONE',
  ERROR: 'ERROR',
  ABORT: 'ABORT'
};

export const IMPORT_JOB_STATE = {
  EMPTY: 'EMPTY',
  QUEUING: 'QUEUING',
  IN_QUEUE: 'IN_QUEUE',
  IMPORTING: 'IMPORTING',
  PROCESSING: 'PROCESSING',
  DONE: 'DONE',
  ERROR: 'ERROR',
  ABORT: 'ABORT'
};

export const OPERATIONS = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE'
};

export const CHUNK_SIZE = 100;

// We could configure here whether a logItemType is for a several records of a single record
// ie. whether is has bulkSequence or bulkSequenceStart & bulkSequenceEnd
export const LOG_ITEM_TYPE = {
  INPUT_RECORD_LOG: 'INPUT_RECORD_LOG',
  MERGE_LOG: 'MERGE_LOG',
  MATCH_LOG: 'MATCH_LOG',
  RESULT_RECORD_LOG: 'RESULT_RECORD_LOG',
  SPLITTER_LOG: 'SPLITTER_LOG',
  LOAD_PROCESS_LOG: 'LOAD_PROCESS_LOG'
};

export const CONVERSION_FORMATS = {
  MARCXML: 'MARCXML',
  ISO2709: 'ISO2709',
  JSON: 'JSON',
  ALEPHSEQ: 'ALEPHSEQ'
};
